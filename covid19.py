# -*- coding: utf-8 -*-
"""Covid19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PZp044hnBRR9bKZclknEs-WVOEoZ1FUK
"""

import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from scipy import stats
import math

confimed_cases_file_link = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
death_cases_file_link = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
recovered_cases_file_link = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"
country_cases_file_link = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_country.csv"

confirmed_df = pd.read_csv(confimed_cases_file_link,  warn_bad_lines=True, error_bad_lines=False)
print(confirmed_df.shape)
deaths_df = pd.read_csv(death_cases_file_link,  warn_bad_lines=True, error_bad_lines=False)
print(deaths_df.shape)
recovered_df = pd.read_csv(recovered_cases_file_link,  warn_bad_lines=True, error_bad_lines=False)
print(recovered_df.head())
# for itm in recovered_df:
#   print(itm)
print(recovered_df.shape)
cases_country_df = pd.read_csv(country_cases_file_link,  warn_bad_lines=True, error_bad_lines=False)
dropped_rows = []
for index, row in cases_country_df.iterrows():
    if math.isnan(row['Recovered']):
      dropped_rows.append(index)
      # cases_country_df.drop(index, axis = 0)
# print(cases_country_df[0]['Recovered'])
# cases_country_df.drop(cases_country_df.index[index])
n = 0
# print("sjkfvjsf  ",cases_country_df.index[1])
cases_country_df = cases_country_df.drop(dropped_rows, axis = 0)
# for index, row in cases_country_df.iterrows():
#   print(type(row['Recovered']), row['Recovered'], index)
# print(cases_country_df.head())
print(cases_country_df.shape)

confirmed_df = confirmed_df.replace(np.nan, '', regex=True)
deaths_df = deaths_df.replace(np.nan, '', regex=True)
recovered_df = recovered_df.replace(np.nan, '', regex=True)
cases_country_df = cases_country_df.replace(np.nan, '', regex=True)

confirmed_df.columns

global_data = cases_country_df.copy().drop(['Lat', 'Long_', 'Country_Region', 'Last_Update', 'UID', 'People_Tested', 'People_Hospitalized', 'ISO3' ], axis = 1)
# print(type(global_data))
print(global_data['Recovered'].sum())
print(global_data.sum())
global_summary = pd.DataFrame(global_data.sum()).transpose()
print("global_summary ---> ",global_summary['Mortality_Rate'][0])
global_summary['Mortality_Rate'][0] = global_summary['Mortality_Rate'][0]/100
print(global_summary['Confirmed'])
global_summary.style.format("{:,.0f}")
# global_summary.style.format({"": "${:20,.0f}", 
#                           "": "${:20,.0f}", 
#                           "": "${:20,.0f}",
#                           "":"${:20,.0f}"})\
#                  .format({"": lambda x:x.lower(),
#                           "": lambda x:x.lower()})\
#                  .hide_index()\
#                  .background_gradient(cmap='Blues')

confirmed_India = cases_country_df[cases_country_df['Country_Region'] == "India"]
confirmed_India = confirmed_India.drop(['Lat', 'Long_', 'Country_Region', 'Incident_Rate', 'Last_Update', 'UID', 'People_Tested', 'People_Hospitalized', 'ISO3' ], axis = 1)
print(confirmed_India.head())
India_Summary = pd.DataFrame(confirmed_India.sum()).transpose()
India_Summary.style.format("{:,.0f}")
                #           "": "${:20,.0f}", 
                #           "": "${:20,.0f}",
                #           "":"${:20,.0f}"})\
                #  .format({"": lambda x:x.lower(),
                #           "": lambda x:x.lower()})\
                #  .hide_index()\
                #  .background_gradient(cmap='Blues')

confirmed_ts = confirmed_df.copy().drop(['Lat','Long','Country/Region','Province/State'],axis =1)
confirmed_ts_summary = confirmed_ts.sum()

fig_1 = go.Figure(data=go.Scatter(x=confirmed_ts_summary.index, y = confirmed_ts_summary.values, mode='lines+markers'))
fig_1.update_layout(title='Total Coronavirus Confirmed Cases (Globally)',
                  yaxis_title='Confirmed Cases', xaxis_tickangle = 315 )
fig_1.show()

# Initializing Color Array to be used across the analysis
color_arr = px.colors.qualitative.Dark24

def draw_plot(ts_array, ts_label, title, colors, mode_size, line_size, x_axis_title , y_axis_title, tickangle = 0, yaxis_type = "", additional_annotations=[]):
    # initialize figure
    fig = go.Figure()
    # add all traces
    for index, ts in enumerate(ts_array):
        fig.add_trace(go.Scatter(x=ts.index,
                                 y = ts.values,
                                 name = ts_label[index],
                                 line=dict(color=colors[index], width=line_size[index]),connectgaps=True,))
    # base x_axis prop.
    x_axis_dict = dict(showline=True, 
                       showgrid=True, 
                       showticklabels=True, 
                       linecolor='rgb(204, 204, 204)', 
                       linewidth=2,
                       ticks='outside',
                       tickfont=dict(family='Arial',size=12,color='rgb(82, 82, 82)',))
    # setting x_axis params
    if x_axis_title:
        x_axis_dict['title'] = x_axis_title
    
    if tickangle > 0:
        x_axis_dict['tickangle'] = tickangle
    
    # base y_axis prop.
    y_axis_dict = dict(showline = True,
                       showgrid = True,
                       showticklabels=True,
                       linecolor='rgb(204, 204, 204)',
                       linewidth=2,)
    # setting y_axis params
    if yaxis_type != "":
        y_axis_dict['type'] = yaxis_type
    
    if y_axis_title:
        y_axis_dict['title'] = y_axis_title
        
#     # uncomment legend if you want to move the legend around
    legend= dict(x=0,
                  y=1,
                  traceorder="normal",
                  font=dict(family="sans-serif",size=12,color="black"),
                  bgcolor="LightSteelBlue",
                  bordercolor="Black",
                  borderwidth=2)

#updating the layout
    fig.update_layout(xaxis = x_axis_dict,
                      yaxis = y_axis_dict,
                      autosize=True,
                      margin=dict(autoexpand=False,l=100,r=20,t=110,),
                      showlegend=True,
                      legend = legend
                     )

    # base annotations for any graph
    annotations = []
    # Title
    annotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05, xanchor='left', yanchor='bottom',
                                  text=title,
                                  font=dict(family='Arial',size=16,color='rgb(37,37,37)'),showarrow=False))
    # adding annotations in params
    if len(additional_annotations) > 0:
        annotations.append(additional_annotations)
    
    #updating the layout
    fig.update_layout(annotations=annotations)

    return fig

confimed_agg_ts = confirmed_df.copy().drop(['Lat','Long','Country/Region','Province/State'],axis =1).sum()
death_agg_ts = deaths_df.copy().drop(['Lat','Long','Country/Region','Province/State'],axis =1).sum()
recovered_agg_ts = recovered_df.copy().drop(['Lat','Long','Country/Region','Province/State'],axis =1).sum()

#There is no timeseries data for Active cases, therefore it needs to be engineered separately
active_agg_ts = pd.Series(
    data=np.array(
        [x1 - x2 - x3  for (x1, x2, x3) in zip(confimed_agg_ts.values,death_agg_ts.values, recovered_agg_ts.values)]),
    index= confimed_agg_ts.index)

#Plot and add traces for all the aggregated timeseries

ts_array = [confimed_agg_ts, active_agg_ts, recovered_agg_ts, death_agg_ts]
labels = ['Confirmed', 'Active', 'Recovered', 'Deaths']
colors = [color_arr[5],  color_arr[0], color_arr[2], color_arr[3]]
mode_size = [8, 8, 12, 8]
line_size = [2, 2, 4, 2]

# Calling the draw_plot function defined above
fig_2 = draw_plot(ts_array = ts_array, 
                  ts_label = labels , 
                  title = "Covid-19 Case Status(22nd Jan to 28th March 2020)",
                  colors = colors, mode_size = mode_size, 
                  line_size = line_size , 
                  x_axis_title = "Date" , 
                  y_axis_title = "Case Count", 
                  tickangle = 315, 
                  yaxis_type = "", additional_annotations=[])

fig_2.show()

cases_country_df.copy().drop(
    ['Lat','Long_','Last_Update'],axis =1).sort_values('Confirmed', ascending= False).reset_index(drop=True).style.bar(
    align="left",width=98,color='#d65f5f')

confirmed_India_ts = confirmed_df[confirmed_df['Country/Region']=="India"]
confirmed_India_ts = confirmed_India_ts.drop(
    ['Lat','Long','Country/Region','Province/State'],axis =1).reset_index(drop=True).sum()

deaths_India_ts = deaths_df[deaths_df['Country/Region']=="India"]
deaths_India_ts = deaths_India_ts.drop(
    ['Lat','Long','Country/Region','Province/State'],axis =1).reset_index(drop=True).sum()

recovered_India_ts = recovered_df[recovered_df['Country/Region']=="India"]
recovered_India_ts = recovered_India_ts.drop(
    ['Lat','Long','Country/Region','Province/State'],axis =1).reset_index(drop=True).sum()

active_India_ts = pd.Series(
    data=np.array(
        [x1 - x2 - x3  for (x1, x2, x3) in zip(
            confirmed_India_ts.values,deaths_India_ts.values, recovered_India_ts.values)
        ] 
    ), 
    index= confirmed_India_ts.index
)
pd.set_option("display.max_rows", None, "display.max_columns", None)

print(confirmed_India_ts)

ts_array = [confirmed_India_ts, active_India_ts, recovered_India_ts, deaths_India_ts]
labels = ['Confirmed', 'Active', 'Recovered', 'Deaths']
colors = [color_arr[5],  color_arr[0], color_arr[2], color_arr[3]]
mode_size = [8, 8, 12, 8]
line_size = [2, 2, 4, 2]

# Calling the draw_plot function defined above
fig_3 = draw_plot(ts_array = ts_array, 
                  ts_label = labels , 
                  title = "Covid-19 Case Trend in INDIA",
                  colors = colors, mode_size = mode_size, 
                  line_size = line_size , 
                  x_axis_title = "Date" , 
                  y_axis_title = "Case Count", 
                  tickangle = 315, 
                  yaxis_type = "", additional_annotations=[])

fig_3.show()

confirmed_US_ts = confirmed_df[confirmed_df['Country/Region']=="US"]
confirmed_US_ts = confirmed_US_ts.drop(
    ['Lat','Long','Country/Region','Province/State'],axis =1).reset_index(drop=True).sum()

deaths_US_ts = deaths_df[deaths_df['Country/Region']=="US"]
deaths_US_ts = deaths_US_ts.drop(
    ['Lat','Long','Country/Region','Province/State'],axis =1).reset_index(drop=True).sum()

recovered_US_ts = recovered_df[recovered_df['Country/Region']=="US"]
recovered_US_ts = recovered_US_ts.drop(
    ['Lat','Long','Country/Region','Province/State'],axis =1).reset_index(drop=True).sum()

active_US_ts = pd.Series(
    data=np.array(
        [x1 - x2 - x3  for (x1, x2, x3) in zip(
            confirmed_US_ts.values,deaths_US_ts.values, recovered_US_ts.values)
        ] 
    ), 
    index= confirmed_US_ts.index
)
pd.set_option("display.max_rows", None, "display.max_columns", None)

print(confirmed_US_ts)

ts_array = [confirmed_US_ts, active_US_ts, recovered_US_ts, deaths_US_ts]
labels = ['Confirmed', 'Active', 'Recovered', 'Deaths']
colors = [color_arr[5],  color_arr[0], color_arr[2], color_arr[3]]
mode_size = [8, 8, 12, 8]
line_size = [2, 2, 4, 2]

# Calling the draw_plot function defined above
fig_3 = draw_plot(ts_array = ts_array, 
                  ts_label = labels , 
                  title = "Covid-19 Case Trend in US",
                  colors = colors, mode_size = mode_size, 
                  line_size = line_size , 
                  x_axis_title = "Date" , 
                  y_axis_title = "Case Count", 
                  tickangle = 315, 
                  yaxis_type = "", additional_annotations=[])

fig_3.show()



confirmed_Italy_ts = confirmed_df[confirmed_df['Country/Region']=="Italy"]
confirmed_Italy_ts = confirmed_Italy_ts.drop(
    ['Lat','Long','Country/Region','Province/State'],axis =1).reset_index(drop=True).sum()

deaths_Italy_ts = deaths_df[deaths_df['Country/Region']=="Italy"]
deaths_Italy_ts = deaths_Italy_ts.drop(
    ['Lat','Long','Country/Region','Province/State'],axis =1).reset_index(drop=True).sum()

recovered_Italy_ts = recovered_df[recovered_df['Country/Region']=="Italy"]
recovered_Italy_ts = recovered_Italy_ts.drop(
    ['Lat','Long','Country/Region','Province/State'],axis =1).reset_index(drop=True).sum()

active_Italy_ts = pd.Series(
    data=np.array(
        [x1 - x2 - x3  for (x1, x2, x3) in zip(
            confirmed_Italy_ts.values,deaths_Italy_ts.values, recovered_Italy_ts.values)
        ] 
    ), 
    index= confirmed_Italy_ts.index
)
pd.set_option("display.max_rows", None, "display.max_columns", None)

#print(confirmed_Italy_ts)
print(recovered_Italy_ts)
#confirmed_Italy_ts.to_csv('confirmed_Italy_ts.csv') 
#confirmed_Italy_ts.to_csv(r'C:\Users\shali\confirmed_Italy_ts.csv', index=False) 
confirmed_Italy_ts.to_csv('example.csv')

ts_array = [confirmed_Italy_ts, active_Italy_ts, recovered_Italy_ts, deaths_Italy_ts]
labels = ['Confirmed', 'Active', 'Recovered', 'Deaths']
colors = [color_arr[5],  color_arr[0], color_arr[2], color_arr[3]]
mode_size = [8, 8, 12, 8]
line_size = [2, 2, 4, 2]

# Calling the draw_plot function defined above
fig_3 = draw_plot(ts_array = ts_array, 
                  ts_label = labels , 
                  title = "Covid-19 Case Trend in ITALY",
                  colors = colors, mode_size = mode_size, 
                  line_size = line_size , 
                  x_axis_title = "Date" , 
                  y_axis_title = "Case Count", 
                  tickangle = 315, 
                  yaxis_type = "", additional_annotations=[])

fig_3.show()

#Just need to change the ts_array
ts_array = [confirmed_India_ts[39:], active_India_ts[39:], recovered_India_ts[39:], deaths_India_ts[39:]]
fig_4 = draw_plot(ts_array = ts_array, 
                  ts_label = labels , 
                  title = "Covid-19 Transmission Timeline in INDIA - 03/02/2020 Onwards",
                  colors = colors, mode_size = mode_size, 
                  line_size = line_size , 
                  x_axis_title = "Date" , 
                  y_axis_title = "Case Count", 
                  tickangle = 315, 
                  yaxis_type = "", additional_annotations=[])

fig_4.show()

fig_5 = draw_plot(ts_array = ts_array, 
                  ts_label = labels , 
                  title = "Semi-Log Plot of Covid-19 Transmission Timeline in INDIA - 03/02/2020 Onwards",
                  colors = colors, mode_size = mode_size, 
                  line_size = line_size , 
                  x_axis_title = "Date" , 
                  y_axis_title = "Case Count", 
                  tickangle = 315, 
                  yaxis_type = "log", additional_annotations=[])

fig_5.show()

# Imports required
from scipy.integrate import solve_ivp
from scipy.optimize import minimize
import matplotlib.pyplot as plt
from datetime import timedelta, datetime

START_DATE = {
  'Italy': '1/31/20',
  'India': '1/30/20'
}
class Learner(object):
    def __init__(self, country, loss, start_date ='2/22/20', predict_range=100,s_0=100000, i_0=2, r_0=10):
        self.country = country
        self.loss = loss
        self.start_date = start_date
        self.predict_range = predict_range
        self.s_0 = s_0
        self.i_0 = i_0
        self.r_0 = r_0

    def load_confirmed(self, country):
        df = pd.read_csv(confimed_cases_file_link)
        df = df.drop(['Province/State'],axis =1)
        country_df = df[df['Country/Region'] == country]
        x = country_df.iloc[0].loc[self.start_date:]
        return x


    def load_recovered(self, country):
        df = pd.read_csv(recovered_cases_file_link)
        df = df.drop(['Province/State'],axis =1)
        country_df = df[df['Country/Region'] == country]
        return country_df.iloc[0].loc[self.start_date:]


    def load_dead(self, country):
        df = pd.read_csv(death_cases_file_link)
        df = df.drop(['Province/State'],axis =1)
        country_df = df[df['Country/Region'] == country]
        return country_df.iloc[0].loc[self.start_date:]
    

    def extend_index(self, index, new_size):
        values = index.values
        current = datetime.strptime(index[-1], '%m/%d/%y')
        while len(values) < new_size:
            current = current + timedelta(days=1)
            values = np.append(values, datetime.strftime(current, '%m/%d/%y'))
        return values

    def predict(self, beta, gamma, data, recovered, death, country, s_0, i_0, r_0):
        """
        Predict how the number of people in each compartment can be changed through time toward the future.
        The model is formulated with the given beta and gamma.
        """
        new_index = self.extend_index(data.index, self.predict_range)
        size = len(new_index)
        def SIR(t, y):
            S = y[0]
            I = y[1]
            R = y[2]
            return [-beta*S*I, beta*S*I-gamma*I, gamma*I]
        extended_actual = np.concatenate((data.values, [None] * (size - len(data.values))))
        extended_recovered = np.concatenate((recovered.values, [None] * (size - len(recovered.values))))
        extended_death = np.concatenate((death.values, [None] * (size - len(death.values))))
        return new_index, extended_actual, extended_recovered, extended_death, solve_ivp(SIR, [0, size], [s_0,i_0,r_0], t_eval=np.arange(0, size, 1))
    
    def train(self):
        """
        Run the optimization to estimate the beta and gamma fitting the given confirmed cases.
        """
        recovered = self.load_recovered(self.country)
        death = self.load_dead(self.country)
        data = (self.load_confirmed(self.country) - recovered - death)
        
        optimal = minimize(
            loss, 
            [0.001, 0.001], 
            args=(data, recovered, self.s_0, self.i_0, self.r_0), 
            method='L-BFGS-B', 
            bounds=[(0.00000001, 0.4), (0.00000001, 0.4)]
        )
        print(optimal)
        beta, gamma = optimal.x
        return beta,gamma

    def predict_data(self, beta, gamma):
        recovered = self.load_recovered(self.country)
        death = self.load_dead(self.country)
        data = (self.load_confirmed(self.country) - recovered - death)
        new_index, extended_actual, extended_recovered, extended_death, prediction = self.predict(beta, gamma, data, recovered, death, self.country, self.s_0, self.i_0, self.r_0)
        df = pd.DataFrame({'Infected data': extended_actual, 'Recovered data': extended_recovered, 'Death data': extended_death, 'Susceptible': prediction.y[0], 'Infected': prediction.y[1], 'Recovered': prediction.y[2]}, index=new_index)
        df.to_csv(f"{self.country}.csv")
        fig, ax = plt.subplots(figsize=(15, 10))
        ax.set_title(self.country)
        df.plot(ax=ax)
        print(f"country={self.country}, beta={beta:.8f}, gamma={gamma:.8f}, r_0:{(beta/gamma):.8f}")
        fig.savefig(f"{self.country}.png")
        
        return df, fig

START_DATE = {
  'Italy': '1/31/20',
  'India': '1/30/20',
  'US': '1/30/20'
}
class LearnerWithLessData(object):
    def __init__(self, country, loss, start_date ='1/22/20', end_date='8/22/20', predict_range=250, s_0=100000, i_0=2, r_0=10):
        self.country = country
        self.loss = loss
        self.start_date = start_date
        self.end_date = end_date
        self.predict_range = predict_range
        self.s_0 = s_0
        self.i_0 = i_0
        self.r_0 = r_0

    def load_confirmed(self, country):
        df = pd.read_csv(confimed_cases_file_link)
        df = df.drop(['Province/State'],axis =1)
        country_df = df[df['Country/Region'] == country]
        x = country_df.iloc[0].loc[self.start_date:self.end_date]
        return x


    def load_recovered(self, country):
        df = pd.read_csv(recovered_cases_file_link)
        df = df.drop(['Province/State'],axis =1)
        country_df = df[df['Country/Region'] == country]
        return country_df.iloc[0].loc[self.start_date:self.end_date]


    def load_dead(self, country):
        df = pd.read_csv(death_cases_file_link)
        df = df.drop(['Province/State'],axis =1)
        country_df = df[df['Country/Region'] == country]
        return country_df.iloc[0].loc[self.start_date:self.end_date]
    

    def extend_index(self, index, new_size):
        values = index.values
        current = datetime.strptime(index[-1], '%m/%d/%y')
        while len(values) < new_size:
            current = current + timedelta(days=1)
            values = np.append(values, datetime.strftime(current, '%m/%d/%y'))
        return values

    def predict(self, beta, gamma, data, recovered, death, country, s_0, i_0, r_0):
        """
        Predict how the number of people in each compartment can be changed through time toward the future.
        The model is formulated with the given beta and gamma.
        """
        new_index = self.extend_index(data.index, self.predict_range)
        size = len(new_index)
        def SIR(t, y):
            S = y[0]
            I = y[1]
            R = y[2]
            return [-beta*S*I, beta*S*I-gamma*I, gamma*I]
        extended_actual = np.concatenate((data.values, [None] * (size - len(data.values))))
        extended_recovered = np.concatenate((recovered.values, [None] * (size - len(recovered.values))))
        extended_death = np.concatenate((death.values, [None] * (size - len(death.values))))
        return new_index, extended_actual, extended_recovered, extended_death, solve_ivp(SIR, [0, size], [s_0,i_0,r_0], t_eval=np.arange(0, size, 1))
    
    def train(self):
        """
        Run the optimization to estimate the beta and gamma fitting the given confirmed cases.
        """
        recovered = self.load_recovered(self.country)
        death = self.load_dead(self.country)
        data = (self.load_confirmed(self.country) - recovered - death)

        print(len(recovered))
        print(len(death))
        print(len(data))
        
        optimal = minimize(
            loss, 
            [0.001, 0.001], 
            args=(data, recovered, self.s_0, self.i_0, self.r_0), 
            method='L-BFGS-B', 
            bounds=[(0.00000001, 0.4), (0.00000001, 0.4)]
        )
        print(optimal)
        beta, gamma = optimal.x
        print("done with training")
        return beta,gamma

    def predict_data(self, beta, gamma):
        recovered = self.load_recovered(self.country)
        death = self.load_dead(self.country)
        data = (self.load_confirmed(self.country) - recovered - death)
        new_index, extended_actual, extended_recovered, extended_death, prediction = self.predict(beta, gamma, data, recovered, death, self.country, self.s_0, self.i_0, self.r_0)
        df = pd.DataFrame({'Infected data': extended_actual, 'Recovered data': extended_recovered, 'Death data': extended_death, 'Susceptible': prediction.y[0], 'Infected': prediction.y[1], 'Recovered': prediction.y[2]}, index=new_index)
        df.to_csv(f"{self.country}.csv")
        fig, ax = plt.subplots(figsize=(15, 10))
        ax.set_title(self.country)
        df.plot(ax=ax)
        print(f"country={self.country}, beta={beta:.8f}, gamma={gamma:.8f}, r_0:{(beta/gamma):.8f}")
        fig.savefig(f"{self.country}.png")
        
        return df, fig

def predict(beta, gamma, data, recovered, death, country, s_0, i_0, r_0, learner):
      """
      Predict how the number of people in each compartment can be changed through time toward the future.
      The model is formulated with the given beta and gamma.
      """
      new_index = learner.extend_index(data.index, 400)
      # print(new_index)
      size = len(new_index)
      def SIR(t, y):
          S = y[0]
          I = y[1]
          R = y[2]
          return [-beta*S*I, beta*S*I-gamma*I, gamma*I]
      extended_actual = np.concatenate((data.values, [None] * (size - len(data.values))))
      extended_recovered = np.concatenate((recovered.values, [None] * (size - len(recovered.values))))
      extended_death = np.concatenate((death.values, [None] * (size - len(death.values))))
      return new_index, extended_actual, extended_recovered, extended_death, solve_ivp(SIR, [0, size], [s_0,i_0,r_0], t_eval=np.arange(0, size, 1))

def predict_data(beta, gamma, country):
      learner = LearnerWithLessData(country = country, loss= loss )
      recovered = learner.load_recovered(country)
      death = learner.load_dead(country)
      print(len(recovered), len(death))
      data = (learner.load_confirmed(country) - recovered - death)
      new_index, extended_actual, extended_recovered, extended_death, prediction = predict(beta, gamma, data, recovered, death, country, learner.s_0, learner.i_0, learner.r_0, learner)

      df = pd.DataFrame({'Infected data(Actual)': extended_actual, 'Recovered data(Actual)': extended_recovered, 'Death data(Actual)': extended_death, 'Susceptible(Predicted)': prediction.y[0], 'Infected(Predicted)': prediction.y[1], 'Recovered(Predicted)': prediction.y[2]}, index=new_index)
      df.to_csv(f"{country}.csv")

      # df1 = pd.DataFrame({'Infected data(Actual)': extended_actual, 'Recovered data(Actual)': extended_recovered, 'Death data(Actual)': extended_death}, index=new_index)
      # df1.to_csv(f"{country}-1.csv")

      # df2 = pd.DataFrame({ 'Susceptible(Predicted)': prediction.y[0], 'Infected(Predicted)': prediction.y[1], 'Recovered(Predicted)': prediction.y[2]}, index=new_index)
      # df2.to_csv(f"{country}-2.csv")


      fig, ax = plt.subplots(figsize=(15, 10))
      ax.set_title(country)


      # df1.plot(ax=ax, sharex = True)
      df.plot(ax=ax, style = ['-', '-','-', '-.', '-.', '-.'], sharex = True)
      print(f"country={country}, beta={beta:.8f}, gamma={gamma:.8f}, r_0:{(beta/gamma):.8f}")
      print(country)
      fig.savefig(f"{country}.png")

      return df, fig

def loss(point, data, recovered, s_0, i_0, r_0):
    size = len(data)
    beta, gamma = point
    def SIR(t, y):
        S = y[0]
        I = y[1]
        R = y[2]
        return [-beta*S*I, beta*S*I-gamma*I, gamma*I]
    solution = solve_ivp(SIR, [0, size], [s_0,i_0,r_0], t_eval=np.arange(0, size, 1), vectorized=True)
    l1 = np.sqrt(np.mean((solution.y[1] - data)**2))
    l2 = np.sqrt(np.mean((solution.y[2] - recovered)**2))
    alpha = 0.1
    return alpha * l1 + (1 - alpha) * l2

italy_learner = LearnerWithLessData(country="Italy", loss= loss )
# beta_italy_learner, gamma_italy_learner = italy_learner.train()
beta_italy_learner = 0.00000198 
gamma_italy_learner = 0.01708001

italy_df, italy_fig = predict_data(beta_italy_learner, gamma_italy_learner, "Italy")

pd.set_option("display.max_rows", None, "display.max_columns", None)

print(italy_df)

r'C:\Users\shali\italy_df.csv'

india_learner = LearnerWithLessData(country="India", loss= loss )
# beta_italy_learner, gamma_italy_learner = italy_learner.train()
beta_india_learner = 0.00000090 
gamma_india_learner = 0.00584126

india_sir , india_sir_fig = predict_data(beta_india_learner, gamma_india_learner, "India")

india_df, india_fig = predict_data(beta_india_learner, gamma_india_learner, "India")

pd.set_option("display.max_rows", None, "display.max_columns", None)

print(india_df)
r'C:\Users\shali\india_df.csv'

us_learner = LearnerWithLessData(country="US", loss= loss )
# beta_italy_learner, gamma_italy_learner = italy_learner.train()
#beta_us_learner = 0.39999926 
#gamma_us_learner = 0.03369285
beta_us_learner = 0.00000198
gamma_us_learner = 0.01708001

us_learner = LearnerWithLessData(country="US", loss= loss )
# beta_italy_learner, gamma_italy_learner = italy_learner.train()
beta_us_learner = 0.39999926 
gamma_us_learner = 0.03369285

us_df, us_fig = predict_data(beta_us_learner, gamma_us_learner, "US")

pd.set_option("display.max_rows", None, "display.max_columns", None)

print(us_df)

us_df, us_fig = predict_data(beta_us_learner, gamma_us_learner, "US")

india_learner = LearnerWithLessData(country="India", loss= loss, i_0= 3 )
beta_india_learner, gamma_india_learner = india_learner.train()
india_df, india_fig = india_learner.predict_data(beta_india_learner, gamma_india_learner)